{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dinopc\\\\Desktop\\\\PROJETOS_DEV\\\\bus-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GeocodingSearch from './components/GeocodingSearch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedBusLine, setSelectedBusLine] = useState('');\n  const [busData, setBusData] = useState([]);\n  const [departureTime, setDepartureTime] = useState('');\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  useEffect(() => {\n    axios.get('http://127.0.0.1:8000/linhas-onibus').then(response => {\n      const data = response.data;\n      const select = document.getElementById('linhas-onibus');\n      data.linhas.forEach(linha => {\n        const option = document.createElement('option');\n        option.text = linha;\n        select.add(option);\n      });\n    }).catch(error => {\n      console.error('Erro ao buscar as linhas de ônibus:', error);\n    });\n  }, []);\n  const handleBusLineSelection = async busLine => {\n    setSelectedBusLine(busLine);\n    try {\n      const response = await axios.get(`http://127.0.0.1:8000/bus-data/${busLine}`);\n      const currentTime = new Date(); // Obtemos o horário atual\n\n      // Verifica se o ponto foi selecionado antes de continuar\n      if (selectedPoint) {\n        const busDataWithTravelTime = await Promise.all(response.data.map(async bus => {\n          // Converte as coordenadas do ônibus para o formato adequado\n          const busCoordinates = {\n            lat: parseFloat(bus.latitude.replace(',', '.')),\n            lng: parseFloat(bus.longitude.replace(',', '.'))\n          };\n\n          // Calcula o tempo de viagem usando o Travel Time Matrix\n          const travelTimeResponse = await axios.post('http://127.0.0.1:8000/calculate-travel-time', {\n            locations: [{\n              id: 'bus',\n              coords: busCoordinates\n            }, {\n              id: 'point',\n              coords: selectedPoint.coords\n            }],\n            departure_searches: [{\n              id: 'departure_search',\n              departure_location_id: 'bus',\n              arrival_location_ids: ['point'],\n              departure_time: currentTime.toISOString(),\n              travel_time: 1800 // Tempo de viagem esperado em segundos\n            }]\n          });\n\n          // Extrai o tempo de viagem do resultado\n          const travelTime = travelTimeResponse.data.results[0].locations[0].properties[0].travel_time;\n          return {\n            linha: bus.linha,\n            velocidade: bus.velocidade,\n            tempoPartida: Math.floor(travelTime / 60) // Convertendo de segundos para minutos\n          };\n        }));\n        setBusData(busDataWithTravelTime || []);\n      }\n    } catch (error) {\n      console.error('Erro ao obter os dados dos ônibus da linha:', error);\n    }\n  };\n  const handlePointSelection = result => {\n    console.log('Ponto selecionado:', result);\n    setSelectedPoint(result);\n  };\n  const handleDepartureTimeSelection = time => {\n    setDepartureTime(time);\n  };\n  useEffect(() => {\n    const monitorBusPosition = async () => {\n      const intervalId = setInterval(async () => {\n        try {\n          const response = await axios.get(`http://127.0.0.1:8000/bus-position/${selectedBusLine}`);\n          const busPositions = response.data;\n\n          // Verificar se algum ônibus está a 10 minutos da localização selecionada dentro da janela de horário\n          const tenMinutesBeforeDeparture = new Date(departureTime);\n          tenMinutesBeforeDeparture.setMinutes(tenMinutesBeforeDeparture.getMinutes() - 10);\n          const busNearLocation = busPositions.find(bus => {\n            const busTimestamp = new Date(bus.timestamp);\n            return busTimestamp >= tenMinutesBeforeDeparture && busTimestamp <= new Date(departureTime);\n          });\n          if (busNearLocation) {\n            // Enviar e-mail de notificação para o usuário\n            console.log('Enviar e-mail de notificação para o usuário');\n          }\n        } catch (error) {\n          console.error('Erro ao monitorar as posições dos ônibus:', error);\n        }\n      }, 60000); // Verificar a cada minuto\n\n      return () => clearInterval(intervalId); // Limpar o intervalo quando o componente for desmontado\n    };\n    if (selectedBusLine && departureTime && selectedPoint) {\n      monitorBusPosition();\n    }\n  }, [selectedBusLine, departureTime, selectedPoint]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GeocodingSearch, {\n      onPointSelect: result => handlePointSelection(result)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"linhas-onibus\",\n      onChange: e => handleBusLineSelection(e.target.value),\n      children: /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Selecione uma linha de \\xF4nibus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      value: departureTime,\n      onChange: e => handleDepartureTimeSelection(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), selectedBusLine && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\xD4nibus da linha \", selectedBusLine]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Linha\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Velocidade\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Tempo at\\xE9 o local de partida\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: busData.map((bus, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: bus.linha\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [bus.velocidade, \" km/h\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [bus.tempoPartida, \" min\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"irwgTLU7Zs8+CWgFZs5Kyf8Hi+I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","GeocodingSearch","jsxDEV","_jsxDEV","App","_s","selectedBusLine","setSelectedBusLine","busData","setBusData","departureTime","setDepartureTime","selectedPoint","setSelectedPoint","get","then","response","data","select","document","getElementById","linhas","forEach","linha","option","createElement","text","add","catch","error","console","handleBusLineSelection","busLine","currentTime","Date","busDataWithTravelTime","Promise","all","map","bus","busCoordinates","lat","parseFloat","latitude","replace","lng","longitude","travelTimeResponse","post","locations","id","coords","departure_searches","departure_location_id","arrival_location_ids","departure_time","toISOString","travel_time","travelTime","results","properties","velocidade","tempoPartida","Math","floor","handlePointSelection","result","log","handleDepartureTimeSelection","time","monitorBusPosition","intervalId","setInterval","busPositions","tenMinutesBeforeDeparture","setMinutes","getMinutes","busNearLocation","find","busTimestamp","timestamp","clearInterval","children","onPointSelect","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","type","index","_c","$RefreshReg$"],"sources":["C:/Users/Dinopc/Desktop/PROJETOS_DEV/bus-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GeocodingSearch from './components/GeocodingSearch';\n\nfunction App() {\n    const [selectedBusLine, setSelectedBusLine] = useState('');\n    const [busData, setBusData] = useState([]);\n    const [departureTime, setDepartureTime] = useState('');\n    const [selectedPoint, setSelectedPoint] = useState(null);\n\n    useEffect(() => {\n        axios.get('http://127.0.0.1:8000/linhas-onibus')\n            .then(response => {\n                const data = response.data;\n                const select = document.getElementById('linhas-onibus');\n                data.linhas.forEach(linha => {\n                    const option = document.createElement('option');\n                    option.text = linha;\n                    select.add(option);\n                });\n            })\n            .catch(error => {\n                console.error('Erro ao buscar as linhas de ônibus:', error);\n            });\n    }, []);\n\n    const handleBusLineSelection = async (busLine) => {\n        setSelectedBusLine(busLine);\n        try {\n            const response = await axios.get(`http://127.0.0.1:8000/bus-data/${busLine}`);\n            const currentTime = new Date(); // Obtemos o horário atual\n\n            // Verifica se o ponto foi selecionado antes de continuar\n            if (selectedPoint) {\n                const busDataWithTravelTime = await Promise.all(response.data.map(async (bus) => {\n                    // Converte as coordenadas do ônibus para o formato adequado\n                    const busCoordinates = {\n                        lat: parseFloat(bus.latitude.replace(',', '.')),\n                        lng: parseFloat(bus.longitude.replace(',', '.'))\n                    };\n\n                    // Calcula o tempo de viagem usando o Travel Time Matrix\n                    const travelTimeResponse = await axios.post('http://127.0.0.1:8000/calculate-travel-time', {\n                        locations: [\n                            { id: 'bus', coords: busCoordinates },\n                            { id: 'point', coords: selectedPoint.coords },\n                        ],\n                        departure_searches: [\n                            {\n                                id: 'departure_search',\n                                departure_location_id: 'bus',\n                                arrival_location_ids: ['point'],\n                                departure_time: currentTime.toISOString(),\n                                travel_time: 1800, // Tempo de viagem esperado em segundos\n                            },\n                        ],\n                    });\n\n                    // Extrai o tempo de viagem do resultado\n                    const travelTime = travelTimeResponse.data.results[0].locations[0].properties[0].travel_time;\n\n                    return {\n                        linha: bus.linha,\n                        velocidade: bus.velocidade,\n                        tempoPartida: Math.floor(travelTime / 60), // Convertendo de segundos para minutos\n                    };\n                }));\n\n                setBusData(busDataWithTravelTime || []);\n            }\n        } catch (error) {\n            console.error('Erro ao obter os dados dos ônibus da linha:', error);\n        }\n    };\n\n    const handlePointSelection = (result) => {\n        console.log('Ponto selecionado:', result);\n        setSelectedPoint(result);\n    };\n\n    const handleDepartureTimeSelection = (time) => {\n        setDepartureTime(time);\n    };\n\n    useEffect(() => {\n        const monitorBusPosition = async () => {\n            const intervalId = setInterval(async () => {\n                try {\n                    const response = await axios.get(`http://127.0.0.1:8000/bus-position/${selectedBusLine}`);\n                    const busPositions = response.data;\n\n                    // Verificar se algum ônibus está a 10 minutos da localização selecionada dentro da janela de horário\n                    const tenMinutesBeforeDeparture = new Date(departureTime);\n                    tenMinutesBeforeDeparture.setMinutes(tenMinutesBeforeDeparture.getMinutes() - 10);\n\n                    const busNearLocation = busPositions.find(bus => {\n                        const busTimestamp = new Date(bus.timestamp);\n                        return busTimestamp >= tenMinutesBeforeDeparture && busTimestamp <= new Date(departureTime);\n                    });\n\n                    if (busNearLocation) {\n                        // Enviar e-mail de notificação para o usuário\n                        console.log('Enviar e-mail de notificação para o usuário');\n                    }\n                } catch (error) {\n                    console.error('Erro ao monitorar as posições dos ônibus:', error);\n                }\n            }, 60000); // Verificar a cada minuto\n\n            return () => clearInterval(intervalId); // Limpar o intervalo quando o componente for desmontado\n        };\n\n        if (selectedBusLine && departureTime && selectedPoint) {\n            monitorBusPosition();\n        }\n\n    }, [selectedBusLine, departureTime, selectedPoint]);\n\n    return (\n        <div>\n            <GeocodingSearch onPointSelect={(result) => handlePointSelection(result)} />\n            <select id=\"linhas-onibus\" onChange={(e) => handleBusLineSelection(e.target.value)}>\n                <option value=\"\">Selecione uma linha de ônibus</option>\n            </select>\n            <input type=\"time\" value={departureTime} onChange={(e) => handleDepartureTimeSelection(e.target.value)} />\n            {selectedBusLine && (\n                <div>\n                    <h2>Ônibus da linha {selectedBusLine}</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Linha</th>\n                                <th>Velocidade</th>\n                                <th>Tempo até o local de partida</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {busData.map((bus, index) => (\n                                <tr key={index}>    \n                                    <td>{bus.linha}</td>\n                                    <td>{bus.velocidade} km/h</td>\n                                    <td>{bus.tempoPartida} min</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}