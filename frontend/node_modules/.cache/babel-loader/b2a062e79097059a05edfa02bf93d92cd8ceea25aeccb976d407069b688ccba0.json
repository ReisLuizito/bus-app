{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dinopc\\\\Desktop\\\\PROJETOS_DEV\\\\bus-app\\\\frontend\\\\src\\\\components\\\\GeocodingSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeocodingSearch = ({\n  onPointSelect\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [results, setResults] = useState([]);\n  const [showNoResults, setShowNoResults] = useState(false);\n  useEffect(() => {\n    // Sua lógica de pesquisa aqui, por exemplo, uma chamada para API de geocodificação\n    // Substitua o seguinte trecho pela lógica real da sua API\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://api.example.com/geocode?search=${searchTerm}`);\n        const data = await response.json();\n        setResults(data.results);\n        setShowNoResults(data.results.length === 0); // Mostra a mensagem \"Sem resultados\" se não houver resultados\n      } catch (error) {\n        console.error('Erro ao buscar resultados de geocodificação:', error);\n      }\n    };\n    if (searchTerm !== '') {\n      fetchData();\n    } else {\n      // Se o termo de pesquisa estiver vazio, limpe os resultados e a mensagem \"Sem resultados\"\n      setResults([]);\n      setShowNoResults(false);\n    }\n  }, [searchTerm]);\n  const handlePointSelect = result => {\n    setSearchTerm('');\n    setResults([]);\n    setShowNoResults(false);\n    onPointSelect(result);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      placeholder: \"Digite sua busca...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setSearchTerm('Pesquisa executada'),\n      children: \"Pesquisar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: showNoResults ? /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Sem resultados\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : results.map(result => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handlePointSelect(result),\n        children: result.name\n      }, result.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(GeocodingSearch, \"rLRy3lIe/vAQO8E/ACr59w0f+mA=\");\n_c = GeocodingSearch;\nexport default GeocodingSearch;\nvar _c;\n$RefreshReg$(_c, \"GeocodingSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GeocodingSearch","onPointSelect","_s","searchTerm","setSearchTerm","results","setResults","showNoResults","setShowNoResults","fetchData","response","fetch","data","json","length","error","console","handlePointSelect","result","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","name","id","_c","$RefreshReg$"],"sources":["C:/Users/Dinopc/Desktop/PROJETOS_DEV/bus-app/frontend/src/components/GeocodingSearch.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst GeocodingSearch = ({ onPointSelect }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [results, setResults] = useState([]);\r\n  const [showNoResults, setShowNoResults] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Sua lógica de pesquisa aqui, por exemplo, uma chamada para API de geocodificação\r\n    // Substitua o seguinte trecho pela lógica real da sua API\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`https://api.example.com/geocode?search=${searchTerm}`);\r\n        const data = await response.json();\r\n        setResults(data.results);\r\n        setShowNoResults(data.results.length === 0); // Mostra a mensagem \"Sem resultados\" se não houver resultados\r\n      } catch (error) {\r\n        console.error('Erro ao buscar resultados de geocodificação:', error);\r\n      }\r\n    };\r\n\r\n    if (searchTerm !== '') {\r\n      fetchData();\r\n    } else {\r\n      // Se o termo de pesquisa estiver vazio, limpe os resultados e a mensagem \"Sem resultados\"\r\n      setResults([]);\r\n      setShowNoResults(false);\r\n    }\r\n  }, [searchTerm]);\r\n\r\n  const handlePointSelect = (result) => {\r\n    setSearchTerm('');\r\n    setResults([]);\r\n    setShowNoResults(false);\r\n    onPointSelect(result);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        placeholder=\"Digite sua busca...\"\r\n      />\r\n      <button onClick={() => setSearchTerm('Pesquisa executada')}>Pesquisar</button>\r\n      <ul>\r\n        {showNoResults ? (\r\n          <li>Sem resultados</li>\r\n        ) : (\r\n          results.map((result) => (\r\n            <li key={result.id} onClick={() => handlePointSelect(result)}>\r\n              {result.name}\r\n            </li>\r\n          ))\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeocodingSearch;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEzDC,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,0CAAyCR,UAAW,EAAC,CAAC;QACpF,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCP,UAAU,CAACM,IAAI,CAACP,OAAO,CAAC;QACxBG,gBAAgB,CAACI,IAAI,CAACP,OAAO,CAACS,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;MAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACtE;IACF,CAAC;IAED,IAAIZ,UAAU,KAAK,EAAE,EAAE;MACrBM,SAAS,CAAC,CAAC;IACb,CAAC,MAAM;MACL;MACAH,UAAU,CAAC,EAAE,CAAC;MACdE,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC,EAAE,CAACL,UAAU,CAAC,CAAC;EAEhB,MAAMc,iBAAiB,GAAIC,MAAM,IAAK;IACpCd,aAAa,CAAC,EAAE,CAAC;IACjBE,UAAU,CAAC,EAAE,CAAC;IACdE,gBAAgB,CAAC,KAAK,CAAC;IACvBP,aAAa,CAACiB,MAAM,CAAC;EACvB,CAAC;EAED,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MACEqB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAElB,UAAW;MAClBmB,QAAQ,EAAGC,CAAC,IAAKnB,aAAa,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CI,WAAW,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACF9B,OAAA;MAAQ+B,OAAO,EAAEA,CAAA,KAAM1B,aAAa,CAAC,oBAAoB,CAAE;MAAAe,QAAA,EAAC;IAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9E9B,OAAA;MAAAoB,QAAA,EACGZ,aAAa,gBACZR,OAAA;QAAAoB,QAAA,EAAI;MAAc;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,GAEvBxB,OAAO,CAAC0B,GAAG,CAAEb,MAAM,iBACjBnB,OAAA;QAAoB+B,OAAO,EAAEA,CAAA,KAAMb,iBAAiB,CAACC,MAAM,CAAE;QAAAC,QAAA,EAC1DD,MAAM,CAACc;MAAI,GADLd,MAAM,CAACe,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEd,CACL;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAzDIF,eAAe;AAAAkC,EAAA,GAAflC,eAAe;AA2DrB,eAAeA,eAAe;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}